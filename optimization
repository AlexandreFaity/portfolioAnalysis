#tuto's link: 'http://www.bradfordlynch.com/blog/2015/12/04/InvestmentPortfolioOptimization.html'
#import modules required
import pandas_datareader as web
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import scipy.optimize as sco

def getStockQuotes(symbols, source, startDate, endDate):
    quotes = pd.DataFrame()
    
    for symbol in symbols:
        quotes[symbol] = web.DataReader(symbol, data_source=source, start=startDate, end=endDate)['Adj Close']
        
    return quotes

def calcPortfolioPerf(weights, meanReturns, covMatrix):
  #Calculate return and variance
  portReturn = np.sum( meanReturns*weights )
  portStdDev = np.sqrt(np.dot(weights.T, np.dot(covMatrix, weights)))
    
  return portReturn, portStdDev

def negSharpeRatio(weights, meanReturns, covMatrix, riskFreeRate):
  p_ret, p_var = calcPortfolioPerf(weights, meanReturns, covMatrix)

  return -(p_ret - riskFreeRate) / p_var

def getPortfolioVol(weights,meanReturns,covMatrix):
  return calcPortfolioPerf(weights, meanReturns, covMatrix)[1]

def findMaxSharpeRatioPortfolio(meanReturns,covMatrix,riskFreeRate):
  numAssets = len(meanReturns)
  args = (meanReturns, covMatrix, riskFreeRate)
  constraints = ({'type':'eq','fun':lambda x: np.sum(x) - 1})
  bounds = tuple((0,1) for asset in range(numAssets))

  opts = sco.minimize(negSharpeRatio, numAssets*[1./numAssets,], args=args, method='SLSQP', bounds=bounds, constraints=constraints)

  return opts

def findMinVariancePortfolio(meanReturns,covMatrix):
  numAssets = len(meanReturns)
  args = (meanReturns, covMatrix)
  constraints = ({'type': 'eq', 'fun': lambda x: np.sum(x) - 1})
  bounds = tuple( (0,1) for asset in range(numAssets))
    
  opts = sco.minimize(getPortfolioVol, numAssets*[1./numAssets,], args=args, method='SLSQP', bounds=bounds, constraints=constraints)
    
  return opts

def findEfficientReturn(meanReturns,covMatrix,targetReturn):
  numAssets = len(meanReturns)
  args = (meanReturns, covMatrix)
    
  def getPortfolioReturn(weights):
        return calcPortfolioPerf(weights, meanReturns, covMatrix)[0]
    
  constraints = ({'type': 'eq', 'fun': lambda x: getPortfolioReturn(x) - targetReturn},
                   {'type': 'eq', 'fun': lambda x: np.sum(x) - 1})
  bounds = tuple((0,1) for asset in range(numAssets))
    
  return sco.minimize(getPortfolioVol, numAssets*[1./numAssets,], args=args, method='SLSQP', bounds=bounds, constraints=constraints)

def findEfficientFrontier(meanReturns, covMatrix, rangeOfReturns):
    efficientPortfolios = []
    for ret in rangeOfReturns:
        efficientPortfolios.append(findEfficientReturn(meanReturns, covMatrix, ret))
        
    return efficientPortfolios

#Stocks inputs
availStocks = ['AAPL', 'NKE', 'MSFT', 'V', 'TM', 'KO', 'PEP', 'JPM', 'CAT']
stocks = availStocks
numAssets = len(stocks)
source = 'yahoo'
start = '2015-01-01'
end = '2020-12-31'

#Retrieve data from online
data = getStockQuotes(stocks, source, start, end)

#Calculate returns
riskFreeRate = 0.0021
numPeriodsAnnually = 252.0
rets = (data - data.shift(1))/data.shift(1)

#Calculate stock mean-variance
meanDailyReturn = rets.mean()
covariance = rets.cov()

#Run MonteCarlo simulation of numPortfolios portfolios
numPortfolios = 100000
results = np.zeros((3,numPortfolios))

#Calculate portfolios
for i in range(numPortfolios):
    #Draw numAssets random numbers and normalize them to be the portfolio weights
    weights = np.random.random(numAssets)
    weights /= np.sum(weights)
    
    #Calculate expected return and volatility of portfolio
    pret, pvar = calcPortfolioPerf(weights, meanDailyReturn, covariance)
    
    #Convert results to annual basis, calculate Sharpe Ratio, and store them
    results[0,i] = pret*numPeriodsAnnually
    results[1,i] = pvar*np.sqrt(numPeriodsAnnually)
    results[2,i] = (results[0,i] - riskFreeRate)/results[1,i]

#Plot results of MC on portfolio weights
# x = pret, y = pvar, 
plt.scatter(results[1,:], results[0,:], c=results[2,:], marker='o')

#Find efficient frontier, annual target returns of 9% and 16% are converted to
#match period of mean returns calculated previously
targetReturns = np.linspace(0.09, 0.45, 50)/(252)
efficientPortfolios = findEfficientFrontier(meanDailyReturn, covariance, targetReturns)
plt.plot([p['fun']*np.sqrt(numPeriodsAnnually) for p in efficientPortfolios], targetReturns*numPeriodsAnnually, 'b--', linewidth=2)

#Find portfolio with maximum Sharpe ratio
maxSharpe = findMaxSharpeRatioPortfolio(meanDailyReturn, covariance, riskFreeRate)
rp, sdp = calcPortfolioPerf(maxSharpe['x'], meanDailyReturn, covariance)
plt.plot(sdp*np.sqrt(numPeriodsAnnually), rp*numPeriodsAnnually, 'r*', markersize=15.0)
print (rp)

#Find portfolio with minimum variance
minVar = findMinVariancePortfolio(meanDailyReturn, covariance)
rp, sdp = calcPortfolioPerf(minVar['x'], meanDailyReturn, covariance)
plt.plot(sdp*np.sqrt(numPeriodsAnnually), rp*numPeriodsAnnually, 'y*', markersize=15.0)

#Graph creation
#MonteCarlo Simul
plt.scatter(results[1,:], results[0,:], c=results[2,:], marker='o')
#EfficientFrontier
plt.plot([p['fun']*np.sqrt(numPeriodsAnnually) for p in efficientPortfolios], targetReturns*numPeriodsAnnually, 'b--', linewidth=2)

#maxSharpe
maxSharpe = findMaxSharpeRatioPortfolio(meanDailyReturn, covariance, riskFreeRate)
rp, sdp = calcPortfolioPerf(maxSharpe['x'], meanDailyReturn, covariance)
plt.plot(sdp*np.sqrt(numPeriodsAnnually), rp*numPeriodsAnnually, 'r*', markersize=15.0)

#minVar
minVar = findMinVariancePortfolio(meanDailyReturn, covariance)
rp, sdp = calcPortfolioPerf(minVar['x'], meanDailyReturn, covariance)
plt.plot(sdp*np.sqrt(numPeriodsAnnually), rp*numPeriodsAnnually, 'y*', markersize=15.0)

#graph parameters
plt.grid(True)
plt.xlabel('Expected Volatility')
plt.ylabel('Expected Return')
plt.colorbar(label='Sharpe Ratio')
plt.title('Portfolios of Many Assets')
plt.tight_layout()
plt.savefig('Monte Carlo Simulation for Portfolio', dpi=100)

plt.figure(figsize=(8,6))
ind = np.arange(numAssets)
width = 0.35
fig, ax = plt.subplots(figsize=(8,6))
rects1 = ax.bar(ind, maxSharpe['x'], width, color='r', alpha=0.75)
rects2 = ax.bar(ind + width, minVar['x'], width, color='b', alpha=0.75)
ax.set_ylabel('Weight of Asset in Portfolio')
ax.set_ylim(0,0.6)
ax.set_title('Comparison of Portfolio Compositions')
ax.set_xticks(ind + width)
ax.set_xticklabels(stocks)
plt.tight_layout()
ax.legend((rects1[0], rects2[0]), ('Max Sharpe Ratio', 'Minimum Volatility'))
plt.savefig('Portfolio Compositions', dpi=100)
plt.show()

#Create a table to get weights of the maxSharpe and minVar ptfs

#round results of maxSharpe and minVar optimization
roundedMaxSharpe = np.round(maxSharpe['x'], decimals=3)*100
roundedMinVar = np.round(minVar['x'], decimals=3)*100

#building a dataframe to show the allocation
df = pd.DataFrame({'Stocks' : stocks,
                   'Weights for maxSharpe' : roundedMaxSharpe,
                   'Weights for minVar' : roundedMinVar})
print (df)
